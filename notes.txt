
// export const seek = (distances, sq) => {

//   const getSquare = R.curry((sq, direction, distance) => {
//       const column = R.compose(R.add(sq.column), R.multiply(distance), R.head)(direction),
//         row = R.compose(R.add(sq.row), R.multiply(distance), R.last)(direction)
//       // return `${column}:${row}`
//       const fn = (coord, dir) => R.compose(R.add(coord), R.multiply(distance))(dir)

//       R.zipWith([sq.column, sq.row], direction)

//       return R.map(, direction)
//     }),

//     getList = R.map(direction => {
//       const getSquares = R.compose(
//         R.prepend(sq.key),
//         R.map(getSquare(sq, direction))
//       )

//       return getSquares(distances)
//     }),

//     list = getList(sq.man.directions)

//   return list
// }

// export const seek = R.curry((distances, board, sq) => {
//   return sq.man.directions.map(direction => {
//     const list = distances.map(distance => {
//       const column = sq.column + R.head(direction) * distance,
//         row = sq.row + R.last(direction) * distance
//       return board[`${column}:${row}`]
//     }).filter(x => x)
//     return [sq, ...list]
//   }).filter(x => x)
// })

const getColumn = (distance, direction, sq) => {
  return R.compose(
    R.add(sq.column),
    R.multiply(distance),
    R.head
  )(direction)
}

const getRow = (distance, direction, sq) => {
  return R.compose(
    R.add(sq.row),
    R.multiply(distance),
    R.last
  )(direction)
}

export const seek = (distances, board, sq) => {
  const getSquare = R.curry((sq, direction, distance) => {
      const column = getColumn(distance, direction, sq),
        row = getRow(distance, direction, sq),
        square = board[`${column}:${row}`]
      return square
    }),

    getList = R.map(direction => {
      const getSquares = R.compose(
        R.prepend(sq),
        R.map(getSquare(sq, direction))
      )

      return getSquares(distances)
    })

  return getList(sq.man.directions)
}